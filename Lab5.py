# 1. –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("Student_Mental_Stress_and_Coping_Mechanisms.csv")

# 3. afisarea
df_copy = df
dft = df
df_corr = df
df_copy

# 4. afisarea informatiei
print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ:")
df.info()

# 5. –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
df.columns = df.columns.str.strip()

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
print("\n–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n", df.isnull().sum())

# 7. –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
le = LabelEncoder()
for col in df.select_dtypes(include="object").columns:
    df[col] = le.fit_transform(df[col].astype(str))

# 8. –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Äî –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é —Å—Ç—Ä–µ—Å—Å–∞
df["StressBinary"] = df["Mental Stress Level"].apply(lambda x: 1 if x >= 2 else 0)

# 9. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä —Ç–æ–ø-3 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
corr_matrix = df.corr()
target_corr = (
    corr_matrix["StressBinary"].drop("StressBinary").sort_values(ascending=False)
)
top_features = target_corr.head(3).index.tolist()

print("\nüß† –¢–æ–ø-3 –ø—Ä–∏–∑–Ω–∞–∫–∞ –ø–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —É—Ä–æ–≤–Ω–µ–º —Å—Ç—Ä–µ—Å—Å–∞:")
print(target_corr.head(3))

# 10. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
X = df[top_features]
y = df["StressBinary"]
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# 11. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "Naive Bayes": GaussianNB(),
}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    print(f"\nüìä –ú–æ–¥–µ–ª—å: {name}")
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))

    # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(6, 4))
    sns.heatmap(cm, annot=True, fmt="d", cmap="YlGnBu")
    plt.title(f"Confusion Matrix: {name}")
    plt.xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ")
    plt.ylabel("–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ")
    plt.tight_layout()
    plt.show()

# 12. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
plt.figure(figsize=(6, 4))
sns.countplot(x=y, palette="coolwarm")
plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞ (–±–∏–Ω–∞—Ä–Ω–æ)")
plt.xlabel("–°—Ç—Ä–µ—Å—Å: 0 = –Ω–∏–∑–∫–∏–π, 1 = –≤—ã—Å–æ–∫–∏–π")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
plt.tight_layout()
plt.show()

# 13. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
plt.figure(figsize=(14, 10))
sns.heatmap(
    corr_matrix, annot=True, fmt=".2f", cmap="coolwarm", square=True, linewidths=0.5
)
plt.title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
plt.tight_layout()
plt.show()
